########################
## The Graph Entities ##
########################

"""
Singleton entity that tracks numbers and stats
"""
type EntityStats @entity {
  "ID is set to 1"
  id: ID!
  "Number of indexers"
  indexerCount: Int!
  "Number of delegators"
  delegatorCount: Int!
  "Number of curators"
  curatorCount: Int!
  "Number of publishers"
  publisherCount: Int!
  "Most recent Era processed for Indexer badges"
  lastEraProcessed: BigInt!
}

type Winner @entity {
  "ETH address of the winner"
  id: ID!
  "Number of badges won"
  badgeCount: Int!
  "Number of badges minted"
  mintedBadgeCount: Int!
  "Voting power accumulated from all badges"
  votingPower: BigInt!
  "Tracks the last block this subgraph updated the internal status of this account"
  lastSyncBlockNumber: BigInt!
  "Badges awarded to address"
  badgesAwarded: [BadgeAward!]! @derivedFrom(field: "winner")
  "Graph Account associated with this ETH address. Null until activity is detected"
  graphAccount: GraphAccount @derivedFrom(field: "winner")
}

type GraphAccount @entity {
  "ETH address of Graph Account"
  id: ID!
  "Winner associated with this Graph Account"
  winner: Winner!
  "Number of Graph badges awarded to this account"
  badgeCount: Int!
  "Voting power accumulated from graph badges"
  votingPower: BigInt!
  "Indexer fields for this Graph Account. Null if never indexed"
  indexer: Indexer @derivedFrom(field: "account")
  "Delegator fields for this Graph Account. Null if never delegated"
  delegator: Delegator @derivedFrom(field: "account")
  "Curator fields for this Graph Account. Null if never curated"
  curator: Curator @derivedFrom(field: "account")
  "Developer fields for this Graph Account. Null if never published subgraphs"
  publisher: Publisher @derivedFrom(field: "account")
}

"""
Metadata for the Indexer along with parameters and staking data
"""
type Indexer @entity {
  "Address of Indexer"
  id: ID!
  "Graph Account associated with this indexer"
  account: GraphAccount!
  "Number of currently open allocations"
  uniqueOpenAllocationCount: Int!
  "Allocations created by this indexer"
  allocations: [Allocation!]! @derivedFrom(field: "indexer")
}

"""
A state channel Allocation representing a single Indexer-Subgraph stake
"""
type Allocation @entity {
  "Channel Address"
  id: ID!
  "Epoch this allocation was created"
  createdAtEpoch: BigInt!
  "Epoch this allocation was closed in"
  closedAtEpoch: BigInt
  "Indexer that created this allocation"
  indexer: Indexer!
  "Subgraph for this allocation"
  subgraph: Subgraph!
}

"""
Metadata for the Delegator
"""
type Delegator @entity {
  "Address of Delegator"
  id: ID!
  "Graph Account associated with this delegator"
  account: GraphAccount!
  "Number of active delegations with unique indexers"
  uniqueActiveDelegationCount: Int!
}

"""
Metadata for the Delegator
"""
type DelegatedStake @entity {
  "Delegator + Indexer"
  id: ID!
  "Delegator or this stake"
  delegator: Delegator!
  "Indexer that was delegated to"
  indexer: Indexer!
  "Delegation shares"
  shares: BigInt!
}

"""
Metadata for the Curator
"""
type Curator @entity {
  "Address of Curator"
  id: ID!
  "Graph Account associated with this curator"
  account: GraphAccount!
  "Number of different subgraphs Curator has signalled"
  uniqueSignalCount: Int!
}

"""
Metadata for the Curator
"""
type SignalledStake @entity {
  "{Curator}-{SubgraphId}"
  id: ID!
  "Curator who signalled"
  curator: Curator!
  "Subgraph that was signalled on"
  subgraphId: Subgraph!
  "Amount of signal shares"
  signal: BigInt!
  "Amount of GRT gained/lost"
  tokenBalance: BigInt!
}

type Publisher @entity {
  "ETH address of Publisher Account"
  id: ID!
  "Graph Account associated with this publisher"
  account: GraphAccount!
  "Subgraphs published by this account"
  subgraphs: [Subgraph!]! @derivedFrom(field: "owner")
}

type Subgraph @entity {
  "subgraph deployment id"
  id: ID!
  "Graph Account that published this subgraph"
  owner: Publisher!
  "First indexer to close an allocation on this subgraph"
  firstToClose: Indexer
  "block which this subgraph was published (ignores versioning)"
  blockPublished: BigInt!
}

########################
#### Badge Entities ####
########################

"""
The badge that is awarded to winner
"""
type BadgeAward @entity {
  "{badgeName}-{winner}"
  id: ID!
  "Address of the winner"
  winner: Winner!
  "Block number in which badge was awarded"
  blockAwarded: BigInt!
  "Additional details about the badge"
  definition: BadgeDefinition!
  "Number in which the badge was awarded"
  badgeNumber: Int!
  "Properties for streak type badges"
  streakProperties: BadgeStreakProperties @derivedFrom(field: "badgeAward")
}

"""
Properties for streak badges. Assigned when streak has ended.
"""
type BadgeStreakProperties @entity {
  "{badgeName}-{winner}"
  id: ID!
  "BadgeAward associated with this streak"
  badgeAward: BadgeAward!
  "Block number when the streak started"
  streakStartBlock: BigInt!
}

type OngoingBadgeStreak @entity {
  "{badgeName}-{winner}"
  id: ID!
  "Block when this streak started"
  streakStartBlock: BigInt!
}

"""
Additional details related to the badge
"""
type BadgeDefinition @entity {
  "Name of the badge"
  id: ID!
  "Description of the badge"
  description: String!
  "IFTP link to the NFT badge"
  image: String!
  "Name of the artist responsible for NFT badge"
  artist: String!
  "Optional link to the artist's portfolio"
  artistWebsite: String
  "Voting power for governance voting"
  votingPower: BigInt!
  "Total count of badges"
  badgeCount: Int!
  "URL slug for the frontend"
  urlHandle: String!
  "Associated protocol for the badge"
  protocol: Protocol!
  "Optional definition for streak badges"
  streakDefinition: BadgeStreakDefinition
  "Badges awarded from this definition"
  badgeAwards: [BadgeAward!]! @derivedFrom(field: "definition")
}

"""
Definition properties for streak badges
"""
type BadgeStreakDefinition @entity {
  "Name of the badge"
  id: ID!
  "Associated BadgeDefinition"
  badgeDefinition: BadgeDefinition!
  "Minimum streak length for badge to be awarded (blocks)"
  minimumBlocks: BigInt!
}

"""
Protocols indexed by this subgraph
"""
type Protocol @entity {
  "Name of the protocol"
  id: ID!
  "URL slug for the frontend"
  urlHandle: String!
  "Description for the protocol"
  description: String!
  "Website for the protocol"
  website: String!
}
