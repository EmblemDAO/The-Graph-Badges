########################
## The Graph Entities ##
########################

"""
Singleton entity that tracks numbers and stats
"""
type EntityStats @entity {
  "ID is set to 1"
  id: ID!
  "Number of winners with voting power"
  voterCount: Int!
  "Number of indexers"
  indexerCount: Int!
  "Number of delegators"
  delegatorCount: Int!
  "Number of curators"
  curatorCount: Int!
  "Number of publishers"
  publisherCount: Int!
  "Number of badge awarded"
  awardCount: Int!
}

type Winner @entity {
  "ETH address of the winner"
  id: ID!
  "Number of badge awards won"
  awardCount: Int!
  "Number of badge awards minted"
  mintedAwardCount: Int!
  "Voting power accumulated from all badges"
  votingPower: BigInt!
  "Badges awarded to address"
  badgesAwarded: [BadgeAward!]! @derivedFrom(field: "winner")
  "Graph Account associated with this ETH address. Null until activity is detected"
  graphAccount: GraphAccount @derivedFrom(field: "winner")
  "Progress this account has made along all badge tracks"
  allBadgeTrackProgress: BadgeTrackProgress @derivedFrom(field: "winner")
}

type GraphAccount @entity {
  "ETH address of Graph Account"
  id: ID!
  "Winner associated with this Graph Account"
  winner: Winner!
  "Number of Graph badges awarded to this account"
  awardCount: Int!
  "Voting power accumulated from graph badges"
  votingPower: BigInt!
  "Indexer fields for this Graph Account. Null if never indexed"
  indexer: Indexer @derivedFrom(field: "account")
  "Delegator fields for this Graph Account. Null if never delegated"
  delegator: Delegator @derivedFrom(field: "account")
  "Curator fields for this Graph Account. Null if never curated"
  curator: Curator @derivedFrom(field: "account")
  "Developer fields for this Graph Account. Null if never published subgraphs"
  publisher: Publisher @derivedFrom(field: "account")
  "Token Lock Wallet for this Graph Account. Null if no token lock wallet"
  tokenLockWallets: [TokenLockWallet!] @derivedFrom(field: "beneficiary")
}

type TokenLockWallet @entity {
  "Contract address"
  id: ID!
  "Beneficiary of this TokenLockWallet"
  beneficiary: GraphAccount!
}

"""
Metadata for the Indexer along with parameters and staking data
"""
type Indexer @entity {
  "Address of Indexer"
  id: ID!
  "Graph Account associated with this indexer"
  account: GraphAccount!
  "Number of different subgraphs this indexer has allocated on"
  uniqueSubgraphAllocationCount: Int!
  "Number of currently open allocations"
  uniqueOpenAllocationCount: Int!
  "Cumulative number of Allocations closed by this indexer"
  allocationsClosedOnTime: Int!
  "CURRENT tokens delegated to the indexer"
  delegatedTokens: BigInt!
  "The total amount of indexing rewards given to delegators"
  delegatorIndexingRewards: BigInt!
  "The percent of indexing rewards generated by the total stake that the Indexer keeps for itself. In parts per million"
  indexingRewardCut: Int!
  "Total query fees collected. Includes the portion given to delegators"
  queryFeesCollected: BigInt!
  "Allocations created by this indexer"
  allocations: [Allocation!]! @derivedFrom(field: "indexer")
}

"""
A state channel Allocation representing a single Indexer-Subgraph stake
"""
type Allocation @entity {
  "Channel Address"
  id: ID!
  "Epoch this allocation was created"
  createdAtEpoch: BigInt!
  "Epoch this allocation was closed in"
  closedAtEpoch: BigInt
  "Indexer that created this allocation"
  indexer: Indexer!
  "Subgraph Deployment for this allocation"
  subgraph: SubgraphDeployment!
}

"""
Tracks which subgraphs an indexer has opened allocations on
"""
type SubgraphAllocation @entity {
  "{indexer}-{subgraphDeploymentId}"
  id: ID!
  "indexer indexing the subgraph"
  indexer: Indexer!
  "subgraph being indexed"
  subgraph: Subgraph!
}

"""
Metadata for the Delegator
"""
type Delegator @entity {
  "Address of Delegator"
  id: ID!
  "Graph Account associated with this delegator"
  account: GraphAccount!
  "Number of active delegations with at least 10k GRT"
  uniqueActiveDelegationCount: Int!
}

"""
Metadata for the Delegator
"""
type DelegatedStake @entity {
  "Delegator + Indexer"
  id: ID!
  "Delegator or this stake"
  delegator: Delegator!
  "Indexer that was delegated to"
  indexer: Indexer!
  "cumulative tokens delegated (does not account for undelegating)"
  tokens: BigInt!
  "true if tokens has ever been >= 1000"
  crossed100: Boolean!
}

"""
Metadata for the Curator
"""
type Curator @entity {
  "Address of Curator"
  id: ID!
  "Graph Account associated with this curator"
  account: GraphAccount!
  "Number of different subgraphs Curator has signalled (cumulative)"
  uniqueSignalCount: Int!
}

"""
Metadata for the Curator
"""
type NameSignal @entity {
  "{Curator}-{SubgraphId}"
  id: ID!
  "Curator who signalled"
  curator: Curator!
  "Subgraph that was signalled on"
  subgraphId: Subgraph!
  "CUMULATIVE number of tokens the curator has signalled"
  signalledTokens: BigInt!
  "CUMULATIVE number of tokens the curator has unsignalled"
  unsignalledTokens: BigInt!
  "Shares of the name pool (GNS) that the curator has from signaling their GRT"
  nameSignal: BigInt!
  "Actual signal shares that the name pool minted with the GRT provided by the curator"
  signal: BigDecimal!
  "Curator average cost basis for this name signal on this subgraph"
  nameSignalAverageCostBasis: BigDecimal! # note this is ONLY name signal. This is okay for the protocol for now
  "nameSignalAverageCostBasis / nameSignal"
  nameSignalAverageCostBasisPerSignal: BigDecimal!
  "Curator average cost basis for the version signal on this subgraph name pool"
  signalAverageCostBasis: BigDecimal!
  "signalAverageCostBasis / signal"
  signalAverageCostBasisPerSignal: BigDecimal!
}

type Publisher @entity {
  "ETH address of Publisher Account"
  id: ID!
  "Graph Account associated with this publisher"
  account: GraphAccount!
  "Subgraphs published by this account"
  subgraphs: [Subgraph!]! @derivedFrom(field: "owner")
  "Number of Subgraphs this Publisher has deployed"
  subgraphCount: Int!
  "Current GRT being curated on subgraphs deployed by this publisher"
  currentCurationTokens: BigInt!
}

type Subgraph @entity {
  "{publisher}-{subgraph number}"
  id: ID!
  "Graph Account that published this subgraph"
  owner: Publisher!
  "First indexer to close an allocation on this subgraph"
  firstToOpen: Indexer
  "block which this subgraph was published (ignores versioning)"
  blockPublished: BigInt!
  "NameSignals associated with this Subgraph"
  nameSignals: [NameSignal!]! @derivedFrom(field: "subgraphId")
}

type SubgraphDeployment @entity {
  id: ID!
  blockPublished: BigInt!
  firstToClose: Indexer
}

########################
#### Badge Entities ####
########################

"""
The badge that is awarded to winner
"""
type BadgeAward @entity {
  "{badgeName}-{awardCount}"
  id: ID!
  "Address of the winner"
  winner: Winner!
  "Block number in which badge was awarded"
  blockAwarded: BigInt!
  "Timestamp in which badge was awarded"
  timestampAwarded: BigInt!
  "Hash of the transaction that triggered this award"
  transactionHash: String!
  "Additional details about the badge"
  definition: BadgeDefinition!
  "Ordered number in which the badge was awarded for the associated definition"
  awardNumber: Int!
  "Ordered number in which the badge was awarded across all badges"
  globalAwardNumber: Int!
  "Data specific to this badgeAwards of a given BadgeDefinition"
  metadata: [BadgeAwardMetadata!]! @derivedFrom(field: "badgeAward")
}

enum BadgeAwardMetadataName {
  INDEXER
  DELEGATOR
  CURATOR
  DEVELOPER
  SUBGRAPH
}

"""
BadgeAward metadata specific to the given BadgeDefinition
"""
type BadgeAwardMetadata @entity {
  "{BadgeAward}-{metricName}"
  id: ID!
  "Name of metric"
  name: BadgeAwardMetadataName!
  "Value"
  value: String!
  "BadgeAward the metadata refers to"
  badgeAward: BadgeAward!
}

type BadgeTrack @entity {
  "Name of Badge Track"
  id: ID!
  "Protocol Role enum"
  protocolRole: String!
  "Protocol"
  protocol: Protocol!
  "Badge Definitions included in this track"
  badgeDefinitions: [BadgeDefinition!]! @derivedFrom(field: "badgeTrack")
}

"""
Additional details related to the badge
"""
type BadgeDefinition @entity {
  "Name of the badge"
  id: ID!
  "Description of the badge"
  description: String!
  "IFTP link to the NFT badge"
  image: String!
  "Name of the artist responsible for NFT badge"
  votingPower: BigInt!
  "Total count of awards"
  awardCount: Int!
  "Track this badge definition belongs to"
  badgeTrack: BadgeTrack!
  "Badges awarded with this definition"
  badgeAwards: [BadgeAward!]! @derivedFrom(field: "definition")
}

type BadgeTrackProgress @entity {
  "Winner + badge track ID"
  id: ID!
  "Winner"
  winner: Winner!
  "Maximum level achieved on this track"
  level: Int!
  "Progress number representing the metric being tracked"
  progress: BigInt!
  "Badge Track this progress refers to"
  badgeTrack: BadgeTrack!
}

"""
Protocols indexed by this subgraph
"""
type Protocol @entity {
  "Name of the protocol"
  id: ID!
}
